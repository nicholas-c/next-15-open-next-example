"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"tryToParsePath",{enumerable:!0,get:function(){return tryToParsePath}});const _pathtoregexp=require("next/dist/compiled/path-to-regexp"),_url=require("url"),_iserror=_interop_require_default(require("./is-error"));function _interop_require_default(e){return e&&e.__esModule?e:{default:e}}function reportError({route:e,parsedPath:r},t){let o;if((0,_iserror.default)(t)&&(o=t.message.match(/at (\d{0,})/))){const s=parseInt(o[1],10);console.error(`\nError parsing \`${e}\` https://nextjs.org/docs/messages/invalid-route-source\nReason: ${t.message}\n\n  ${r}\n  ${new Array(s).fill(" ").join("")}^\n`)}else console.error(`\nError parsing ${e} https://nextjs.org/docs/messages/invalid-route-source`,t)}function tryToParsePath(e,r){const t={route:e,parsedPath:e};try{if(null==r?void 0:r.handleUrl){const r=(0,_url.parse)(e,!0);t.parsedPath=`${r.pathname}${r.hash||""}`}t.tokens=(0,_pathtoregexp.parse)(t.parsedPath),t.regexStr=(0,_pathtoregexp.tokensToRegexp)(t.tokens).source}catch(e){reportError(t,e),t.error=e}return t}