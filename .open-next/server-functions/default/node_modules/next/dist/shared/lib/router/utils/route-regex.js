"use strict";function _export(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}Object.defineProperty(exports,"__esModule",{value:!0}),_export(exports,{getNamedMiddlewareRegex:function(){return getNamedMiddlewareRegex},getNamedRouteRegex:function(){return getNamedRouteRegex},getRouteRegex:function(){return getRouteRegex},parseParameter:function(){return parseParameter}});const _constants=require("../../../../lib/constants"),_interceptionroutes=require("../../../../server/lib/interception-routes"),_escaperegexp=require("../../escape-regexp"),_removetrailingslash=require("./remove-trailing-slash"),PARAMETER_PATTERN=/^([^[]*)\[((?:\[[^\]]*\])|[^\]]+)\](.*)$/;function parseParameter(e){const t=e.match(PARAMETER_PATTERN);return parseMatchedParameter(t?t[2]:e)}function parseMatchedParameter(e){const t=e.startsWith("[")&&e.endsWith("]");t&&(e=e.slice(1,-1));const r=e.startsWith("...");return r&&(e=e.slice(3)),{key:e,repeat:r,optional:t}}function getParametrizedRoute(e,t,r){const a={};let n=1;const s=[];for(const o of(0,_removetrailingslash.removeTrailingSlash)(e).slice(1).split("/")){const e=_interceptionroutes.INTERCEPTION_ROUTE_MARKERS.find((e=>o.startsWith(e))),i=o.match(PARAMETER_PATTERN);if(e&&i&&i[2]){const{key:t,optional:r,repeat:o}=parseMatchedParameter(i[2]);a[t]={pos:n++,repeat:o,optional:r},s.push("/"+(0,_escaperegexp.escapeStringRegexp)(e)+"([^/]+?)")}else if(i&&i[2]){const{key:e,repeat:t,optional:o}=parseMatchedParameter(i[2]);a[e]={pos:n++,repeat:t,optional:o},r&&i[1]&&s.push("/"+(0,_escaperegexp.escapeStringRegexp)(i[1]));let u=t?o?"(?:/(.+?))?":"/(.+?)":"/([^/]+?)";r&&i[1]&&(u=u.substring(1)),s.push(u)}else s.push("/"+(0,_escaperegexp.escapeStringRegexp)(o));t&&i&&i[3]&&s.push((0,_escaperegexp.escapeStringRegexp)(i[3]))}return{parameterizedRoute:s.join(""),groups:a}}function getRouteRegex(e,t){let{includeSuffix:r=!1,includePrefix:a=!1,excludeOptionalTrailingSlash:n=!1}=void 0===t?{}:t;const{parameterizedRoute:s,groups:o}=getParametrizedRoute(e,r,a);let i=s;return n||(i+="(?:/)?"),{re:new RegExp("^"+i+"$"),groups:o}}function buildGetSafeRouteKey(){let e=0;return()=>{let t="",r=++e;for(;r>0;)t+=String.fromCharCode(97+(r-1)%26),r=Math.floor((r-1)/26);return t}}function getSafeKeyFromSegment(e){let{interceptionMarker:t,getSafeRouteKey:r,segment:a,routeKeys:n,keyPrefix:s,backreferenceDuplicateKeys:o}=e;const{key:i,optional:u,repeat:c}=parseMatchedParameter(a);let p=i.replace(/\W/g,"");s&&(p=""+s+p);let g=!1;(0===p.length||p.length>30)&&(g=!0),isNaN(parseInt(p.slice(0,1)))||(g=!0),g&&(p=r());const l=p in n;n[p]=s?""+s+i:i;const R=t?(0,_escaperegexp.escapeStringRegexp)(t):"";let m;return m=l&&o?"\\k<"+p+">":c?"(?<"+p+">.+?)":"(?<"+p+">[^/]+?)",u?"(?:/"+R+m+")?":"/"+R+m}function getNamedParametrizedRoute(e,t,r,a,n){const s=buildGetSafeRouteKey(),o={},i=[];for(const u of(0,_removetrailingslash.removeTrailingSlash)(e).slice(1).split("/")){const e=_interceptionroutes.INTERCEPTION_ROUTE_MARKERS.some((e=>u.startsWith(e))),c=u.match(PARAMETER_PATTERN);if(e&&c&&c[2])i.push(getSafeKeyFromSegment({getSafeRouteKey:s,interceptionMarker:c[1],segment:c[2],routeKeys:o,keyPrefix:t?_constants.NEXT_INTERCEPTION_MARKER_PREFIX:void 0,backreferenceDuplicateKeys:n}));else if(c&&c[2]){a&&c[1]&&i.push("/"+(0,_escaperegexp.escapeStringRegexp)(c[1]));let e=getSafeKeyFromSegment({getSafeRouteKey:s,segment:c[2],routeKeys:o,keyPrefix:t?_constants.NEXT_QUERY_PARAM_PREFIX:void 0,backreferenceDuplicateKeys:n});a&&c[1]&&(e=e.substring(1)),i.push(e)}else i.push("/"+(0,_escaperegexp.escapeStringRegexp)(u));r&&c&&c[3]&&i.push((0,_escaperegexp.escapeStringRegexp)(c[3]))}return{namedParameterizedRoute:i.join(""),routeKeys:o}}function getNamedRouteRegex(e,t){var r,a,n;const s=getNamedParametrizedRoute(e,t.prefixRouteKeys,null!=(r=t.includeSuffix)&&r,null!=(a=t.includePrefix)&&a,null!=(n=t.backreferenceDuplicateKeys)&&n);let o=s.namedParameterizedRoute;return t.excludeOptionalTrailingSlash||(o+="(?:/)?"),{...getRouteRegex(e,t),namedRegex:"^"+o+"$",routeKeys:s.routeKeys}}function getNamedMiddlewareRegex(e,t){const{parameterizedRoute:r}=getParametrizedRoute(e,!1,!1),{catchAll:a=!0}=t;if("/"===r){return{namedRegex:"^/"+(a?".*":"")+"$"}}const{namedParameterizedRoute:n}=getNamedParametrizedRoute(e,!1,!1,!1,!1);return{namedRegex:"^"+n+(a?"(?:(/.*)?)":"")+"$"}}