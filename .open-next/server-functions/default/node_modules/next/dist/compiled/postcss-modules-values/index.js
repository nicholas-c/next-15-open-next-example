(()=>{"use strict";var e={400:(e,r,t)=>{const s=t(903),a=/^(.+?|\([\s\S]+?\))\s+from\s+("[^"]*"|'[^']*'|[\w-]+)$/,o=/(?:\s+|^)([\w-]+):?(.*?)$/,n=/^([\w-]+)(?:\s+as\s+([\w-]+))?/;e.exports=e=>{let r=0;const t=e&&e.createImportedName||(e=>`i__const_${e.replace(/\W/g,"_")}_${r++}`);return{postcssPlugin:"postcss-modules-values",prepare(e){const r=[],p={};return{Once(i,l){if(i.walkAtRules(/value/i,(i=>{const l=i.params.match(a);if(l){let[,e,s]=l;p[s]&&(s=p[s]);const a=e.replace(/^\(\s*([\s\S]+)\s*\)$/,"$1").split(/\s*,\s*/).map((e=>{const r=n.exec(e);if(r){const[,e,s=e]=r,a=t(s);return p[s]=a,{theirName:e,importedName:a}}throw new Error(`@import statement "${e}" is invalid!`)}));return r.push({path:s,imports:a}),void i.remove()}-1!==i.params.indexOf("@value")&&e.warn("Invalid value definition: "+i.params);let[,c,m]=`${i.params}${i.raws.between}`.match(o);const u=m.replace(/\/\*((?!\*\/).*?)\*\//g,"");if(0===u.length)return e.warn("Invalid value definition: "+i.params),void i.remove();/^\s+$/.test(u)||(m=m.trim()),p[c]=s.replaceValueSymbols(m,p),i.remove()})),!Object.keys(p).length)return;s.replaceSymbols(i,p);const c=Object.keys(p).map((e=>l.decl({value:p[e],prop:e,raws:{before:"\n  "}})));if(c.length>0){const e=l.rule({selector:":export",raws:{after:"\n"}});e.append(c),i.prepend(e)}r.reverse().forEach((({path:e,imports:r})=>{const t=l.rule({selector:`:import(${e})`,raws:{after:"\n"}});r.forEach((({theirName:e,importedName:r})=>{t.append({value:e,prop:r,raws:{before:"\n  "}})})),i.prepend(t)}))}}}}},e.exports.postcss=!0},903:e=>{e.exports=require("next/dist/compiled/icss-utils")}},r={};function t(s){var a=r[s];if(void 0!==a)return a.exports;var o=r[s]={exports:{}},n=!0;try{e[s](o,o.exports,t),n=!1}finally{n&&delete r[s]}return o.exports}void 0!==t&&(t.ab=__dirname+"/");var s=t(400);module.exports=s})();