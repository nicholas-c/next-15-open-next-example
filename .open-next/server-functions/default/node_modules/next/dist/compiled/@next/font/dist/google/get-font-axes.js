"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getFontAxes=getFontAxes;const format_available_values_1=require("../format-available-values"),next_font_error_1=require("../next-font-error"),google_fonts_metadata_1=require("./google-fonts-metadata");function getFontAxes(e,a,t,o){const r=t.includes("italic"),n=t.includes("normal"),l=r?[...n?["0"]:[],"1"]:void 0;if("variable"===a[0]){const a=google_fonts_metadata_1.googleFontsMetadata[e].axes;if(!a)throw new Error("invariant variable font without axes");if(o){const t=a.map((({tag:e})=>e)).filter((e=>"wght"!==e));0===t.length&&(0,next_font_error_1.nextFontError)(`Font \`${e}\` has no definable \`axes\``),Array.isArray(o)||(0,next_font_error_1.nextFontError)(`Invalid axes value for font \`${e}\`, expected an array of axes.\nAvailable axes: ${(0,format_available_values_1.formatAvailableValues)(t)}`),o.forEach((a=>{t.some((e=>e===a))||(0,next_font_error_1.nextFontError)(`Invalid axes value \`${a}\` for font \`${e}\`.\nAvailable axes: ${(0,format_available_values_1.formatAvailableValues)(t)}`)}))}let t,r;for(const{tag:e,min:n,max:l}of a)"wght"===e?t=`${n}..${l}`:(null==o?void 0:o.includes(e))&&(r||(r=[]),r.push([e,`${n}..${l}`]));return{wght:t?[t]:void 0,ital:l,variableAxes:r}}return{ital:l,wght:a}}