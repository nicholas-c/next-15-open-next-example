"use strict";let fontFromBuffer;Object.defineProperty(exports,"__esModule",{value:!0});try{const t=require("../fontkit").default;fontFromBuffer=t.default||t}catch{}const util_1=require("util"),pick_font_file_for_fallback_generation_1=require("./pick-font-file-for-fallback-generation"),get_fallback_metrics_from_font_file_1=require("./get-fallback-metrics-from-font-file"),validate_local_font_function_call_1=require("./validate-local-font-function-call"),nextFontLocalFontLoader=async({functionName:t,variableName:e,data:a,emitFontFile:l,resolve:o,loaderContext:n})=>{const{src:i,display:f,fallback:r,preload:c,variable:s,adjustFontFallback:_,declarations:u,weight:d,style:F}=(0,validate_local_font_function_call_1.validateLocalFontFunctionCall)(t,a[0]),m=await Promise.all(i.map((async({path:t,style:a,weight:i,ext:r,format:s})=>{const m=await o(t),p=await(0,util_1.promisify)(n.fs.readFile)(m),k=l(p,r,c,void 0===_||!!_);let b;try{b=null==fontFromBuffer?void 0:fontFromBuffer(p)}catch(t){console.error(`Failed to load font file: ${m}\n${t}`)}return{css:`@font-face {\n${[...u?u.map((({prop:t,value:e})=>[t,e])):[],["font-family",e],["src",`url(${k}) format('${s}')`],["font-display",f],...(null!=i?i:d)?[["font-weight",null!=i?i:d]]:[],...(null!=a?a:F)?[["font-style",null!=a?a:F]]:[]].map((([t,e])=>`${t}: ${e};`)).join("\n")}\n}\n`,fontMetadata:b,weight:i,style:a}})));let p;if(!1!==_){const t=(0,pick_font_file_for_fallback_generation_1.pickFontFileForFallbackGeneration)(m);t.fontMetadata&&(p=(0,get_fallback_metrics_from_font_file_1.getFallbackMetricsFromFontFile)(t.fontMetadata,"Times New Roman"===_?"serif":"sans-serif"))}return{css:m.map((({css:t})=>t)).join("\n"),fallbackFonts:r,weight:1===i.length?i[0].weight:void 0,style:1===i.length?i[0].style:void 0,variable:s,adjustFontFallback:p}};exports.default=nextFontLocalFontLoader;