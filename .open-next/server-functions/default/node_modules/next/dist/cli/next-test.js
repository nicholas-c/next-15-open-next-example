"use strict";function _export(e,t){for(var i in t)Object.defineProperty(e,i,{enumerable:!0,get:t[i]})}Object.defineProperty(exports,"__esModule",{value:!0}),_export(exports,{SUPPORTED_TEST_RUNNERS_LIST:function(){return SUPPORTED_TEST_RUNNERS_LIST},nextTest:function(){return nextTest}});const _fs=require("fs"),_getprojectdir=require("../lib/get-project-dir"),_utils=require("../server/lib/utils"),_config=_interop_require_default(require("../server/config")),_constants=require("../shared/lib/constants"),_hasnecessarydependencies=require("../lib/has-necessary-dependencies"),_installdependencies=require("../lib/install-dependencies"),_findup=_interop_require_default(require("next/dist/compiled/find-up")),_findpagesdir=require("../lib/find-pages-dir"),_verifytypescriptsetup=require("../lib/verify-typescript-setup"),_path=_interop_require_default(require("path")),_crossspawn=_interop_require_default(require("next/dist/compiled/cross-spawn"));function _interop_require_default(e){return e&&e.__esModule?e:{default:e}}const SUPPORTED_TEST_RUNNERS_LIST=["playwright"],requiredPackagesByTestRunner={playwright:[{file:"playwright",pkg:"@playwright/test",exportsRestrict:!1}]};async function nextTest(e,t=[],i={}){let r,n;try{r=(0,_getprojectdir.getProjectDir)(e,!1)}catch(i){t.unshift(e),r=(0,_getprojectdir.getProjectDir)()}try{n=await(0,_config.default)(_constants.PHASE_PRODUCTION_BUILD,r)}catch(i){t.unshift(e),r=(0,_getprojectdir.getProjectDir)(),n=await(0,_config.default)(_constants.PHASE_PRODUCTION_BUILD,r)}const s=(null==i?void 0:i.testRunner)??n.experimental.defaultTestRunner??"playwright";return n.experimental.testProxy?"playwright"===s?runPlaywright(r,n,t):(0,_utils.printAndExit)(`Test runner ${s} is not supported.`):(0,_utils.printAndExit)("`next experimental-test` requires the `experimental.testProxy: true` configuration option.")}async function checkRequiredDeps(e,t){const i=await(0,_hasnecessarydependencies.hasNecessaryDependencies)(e,requiredPackagesByTestRunner[t]);if(i.missing.length>0){await(0,_installdependencies.installDependencies)(e,i.missing,!0);const t=(0,_crossspawn.default)(_path.default.join(e,"node_modules",".bin","playwright"),["install"],{cwd:e,shell:!1,stdio:"inherit",env:{...process.env}});return new Promise(((e,i)=>{t.on("close",(t=>e(t))),t.on("error",(e=>i(e)))}))}}async function runPlaywright(e,t,i){await checkRequiredDeps(e,"playwright");if(await(0,_findup.default)(["playwright.config.js","playwright.config.ts"],{cwd:e})){const t=(0,_crossspawn.default)(_path.default.join(e,"node_modules",".bin","playwright"),["test",...i],{cwd:e,shell:!1,stdio:"inherit",env:{...process.env}});return new Promise(((e,i)=>{t.on("close",(t=>e(t))),t.on("error",(e=>i(e)))}))}{const{pagesDir:i,appDir:r}=(0,_findpagesdir.findPagesDir)(e),{version:n}=await(0,_verifytypescriptsetup.verifyTypeScriptSetup)({dir:e,distDir:t.distDir,intentDirs:[i,r].filter(Boolean),typeCheckPreflight:!1,tsconfigPath:t.typescript.tsconfigPath,disableStaticImages:t.images.disableStaticImages,hasAppDir:!!r,hasPagesDir:!!i}),s=!!n,a=s?"playwright.config.ts":"playwright.config.js";return(0,_fs.writeFileSync)(_path.default.join(e,a),defaultPlaywrightConfig(s)),(0,_utils.printAndExit)(`Successfully generated ${a}. Create your first test and then run \`next experimental-test\`.`,0)}}function defaultPlaywrightConfig(e){const t="/*\n * Specify any additional Playwright config options here.\n * They will be merged with Next.js' default Playwright config.\n * You can access the default config by importing `defaultPlaywrightConfig` from `'next/experimental/testmode/playwright'`.\n */";return e?`import { defineConfig } from 'next/experimental/testmode/playwright';\n\n${t}\nexport default defineConfig({});`:`const { defineConfig } = require('next/experimental/testmode/playwright');\n\n${t}\nmodule.exports = defineConfig({});`}