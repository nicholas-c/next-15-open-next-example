"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"default",{enumerable:!0,get:function(){return _default}});const _postcssvalueparser=_interop_require_default(require("next/dist/compiled/postcss-value-parser")),_utils=require("../utils");function _interop_require_default(e){return e&&e.__esModule?e:{default:e}}function parseNode(e,t){if("root"!==e.parent.type)return;if(e.raws&&e.raws.afterName&&e.raws.afterName.trim().length>0){const t=e.raws.afterName.lastIndexOf("/*"),r=e.raws.afterName.slice(t).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);if(r&&"true"===r[2])return}const r=e.prev();if(r&&"comment"===r.type){const e=r.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);if(e&&"true"===e[2])return}if(e.nodes){const t=Object.defineProperty(new Error("It looks like you didn't end your @import statement correctly. Child nodes are attached to it."),"__NEXT_ERROR_CODE",{value:"E341",enumerable:!1,configurable:!0});throw t.node=e,t}const{nodes:n}=(0,_postcssvalueparser.default)(e[t]);if(0===n.length||"string"!==n[0].type&&"function"!==n[0].type){const t=Object.defineProperty(new Error(`Unable to find uri in "${e.toString()}"`),"__NEXT_ERROR_CODE",{value:"E215",enumerable:!1,configurable:!0});throw t.node=e,t}let i,s;if("string"===n[0].type)i=!0,s=n[0].value;else{if("url"!==n[0].value.toLowerCase()){const t=Object.defineProperty(new Error(`Unable to find uri in "${e.toString()}"`),"__NEXT_ERROR_CODE",{value:"E215",enumerable:!1,configurable:!0});throw t.node=e,t}i=0!==n[0].nodes.length&&"string"===n[0].nodes[0].type,s=i?n[0].nodes[0].value:_postcssvalueparser.default.stringify(n[0].nodes)}s=(0,_utils.normalizeUrl)(s,i);const o=(0,_utils.isUrlRequestable)(s);let a;if(o){const e=s.split("!");e.length>1&&(s=e.pop(),a=e.join("!"))}if(0===s.trim().length){const t=Object.defineProperty(new Error(`Unable to find uri in "${e.toString()}"`),"__NEXT_ERROR_CODE",{value:"E215",enumerable:!1,configurable:!0});throw t.node=e,t}const l=n.slice(1);let u;return l.length>0&&(u=_postcssvalueparser.default.stringify(l).trim().toLowerCase()),{atRule:e,prefix:a,url:s,media:u,isRequestable:o}}const plugin=(e={})=>({postcssPlugin:"postcss-import-parser",prepare(t){const r=[];return{AtRule:{import(e){let n;try{n=parseNode(e,"params",t)}catch(e){t.warn(e.message,{node:e.node})}n&&r.push(n)}},async OnceExit(){if(0===r.length)return;const t=await Promise.all(r.map((async t=>{const{atRule:r,isRequestable:n,prefix:i,url:s,media:o}=t;if(e.filter){if(!await e.filter(s,o))return}if(n){const t=(0,_utils.requestify)(s,e.rootContext),{resolver:a,context:l}=e,u=await(0,_utils.resolveRequests)(a,l,[...new Set([t,s])]);if(!u)return;return u===e.resourcePath?void r.remove():(r.remove(),{url:u,media:o,prefix:i,isRequestable:n})}return r.remove(),{url:s,media:o,prefix:i,isRequestable:n}}))),n=new Map;for(let r=0;r<=t.length-1;r++){const i=t[r];if(!i)continue;const{url:s,isRequestable:o,media:a}=i;if(!o){e.api.push({url:s,media:a,index:r});continue}const{prefix:l}=i,u=l?`${l}!${s}`:s;let p=n.get(u);p||(p=`___CSS_LOADER_AT_RULE_IMPORT_${n.size}___`,n.set(u,p),e.imports.push({type:"rule_import",importName:p,url:e.urlHandler(u),index:r})),e.api.push({importName:p,media:a,index:r})}}}}});plugin.postcss=!0;const _default=plugin;