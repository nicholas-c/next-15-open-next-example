"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"LightningCssMinifyPlugin",{enumerable:!0,get:function(){return LightningCssMinifyPlugin}});const _webpack=require("next/dist/compiled/webpack/webpack"),_webpacksources3=require("next/dist/compiled/webpack-sources3"),_interface=require("./interface"),_utils=require("./utils"),_buffer=require("buffer"),PLUGIN_NAME="lightning-css-minify",CSS_FILE_REG=/\.css(?:\?.*)?$/i;class LightningCssMinifyPlugin{constructor(e={}){const{implementation:s,...t}=e;if(s&&"function"!=typeof s.transformCss)throw Object.defineProperty(new TypeError("[LightningCssMinifyPlugin]: implementation.transformCss must be an 'lightningcss' transform function. Received "+typeof s.transformCss),"__NEXT_ERROR_CODE",{value:"E561",enumerable:!1,configurable:!0});this.transform=null==s?void 0:s.transformCss,this.options=t}apply(e){const s=JSON.stringify({name:"@next/lightningcss-loader",version:"0.0.0",options:this.options});e.hooks.compilation.tap(PLUGIN_NAME,(e=>{e.hooks.chunkHash.tap(PLUGIN_NAME,((e,t)=>t.update(s))),e.hooks.processAssets.tapPromise({name:PLUGIN_NAME,stage:_webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,additionalAssets:!0},(async()=>await this.transformAssets(e))),e.hooks.statsPrinter.tap(PLUGIN_NAME,(e=>{e.hooks.print.for("asset.info.minimized").tap(PLUGIN_NAME,((e,{green:s,formatFlag:t})=>e?s(t("minimized")):void 0))}))}))}async transformAssets(e){const{options:{devtool:s}}=e.compiler;if(!this.transform){const{loadBindings:e}=require("next/dist/build/swc");this.transform=(await e()).css.lightning.transform}const t=void 0===this.options.sourceMap?s&&s.includes("source-map"):this.options.sourceMap,{include:i,exclude:n,test:o,targets:r,...a}=this.options,c=e.getAssets().filter((e=>!e.info.minimized&&(o||CSS_FILE_REG).test(e.name)&&_webpack.ModuleFilenameHelpers.matchObject({include:i,exclude:n},e.name)));await Promise.all(c.map((async s=>{const{source:i,map:n}=s.source.sourceAndMap(),o=i.toString(),c="string"==typeof i?_buffer.Buffer.from(i):i,p=(0,_utils.getTargets)({targets:r,key:_interface.ECacheKey.minify}),u=await this.transform({filename:s.name,code:c,minify:!0,sourceMap:t,targets:p,...a}),m=u.code.toString();e.updateAsset(s.name,t?new _webpacksources3.SourceMapSource(m,s.name,JSON.parse(u.map.toString()),o,n,!0):new _webpacksources3.RawSource(m),{...s.info,minimized:!0})})))}}