"use strict";function _export(t,e){for(var r in e)Object.defineProperty(t,r,{enumerable:!0,get:e[r]})}Object.defineProperty(exports,"__esModule",{value:!0}),_export(exports,{batcher:function(){return batcher},default:function(){return _default}});const _shared=require("../shared"),_fs=_interop_require_default(require("fs")),_path=_interop_require_default(require("path")),_constants=require("../../shared/lib/constants");function _interop_require_default(t){return t&&t.__esModule?t:{default:t}}const localEndpoint={serviceName:"nextjs",ipv4:"127.0.0.1",port:9411};function batcher(t){const e=[],r=new Set;return{flushAll:async()=>{await Promise.all(r),e.length>0&&(await t(e),e.length=0)},report:i=>{if(e.push(i),e.length>100){const i=e.slice();e.length=0;const a=t(i);r.add(a),a.then((()=>r.delete(a)))}}}}let writeStream,batch;const writeStreamOptions={flags:"a",encoding:"utf8"};class RotatingWriteStream{constructor(t,e){this.file=t,this.size=0,this.sizeLimit=e,this.createWriteStream()}createWriteStream(){this.writeStream=_fs.default.createWriteStream(this.file,writeStreamOptions)}async rotate(){await this.end();try{_fs.default.unlinkSync(this.file)}catch(t){if("ENOENT"!==t.code)throw t}this.size=0,this.createWriteStream(),this.rotatePromise=void 0}async write(t){this.rotatePromise&&await this.rotatePromise,this.size+=t.length,this.size>this.sizeLimit&&await(this.rotatePromise=this.rotate()),this.writeStream.write(t,"utf8")||(void 0===this.drainPromise&&(this.drainPromise=new Promise(((t,e)=>{this.writeStream.once("drain",(()=>{this.drainPromise=void 0,t()}))}))),await this.drainPromise)}end(){return new Promise((t=>{this.writeStream.end(t)}))}}const reportToLocalHost=t=>{const e=_shared.traceGlobals.get("distDir"),r=_shared.traceGlobals.get("phase");e&&r&&(batch||(batch=batcher((async t=>{if(!writeStream){await _fs.default.promises.mkdir(e,{recursive:!0});const t=_path.default.join(e,"trace");writeStream=new RotatingWriteStream(t,r===_constants.PHASE_DEVELOPMENT_SERVER?52428800:1/0)}const i=JSON.stringify(t);try{await writeStream.write(i+"\n")}catch(t){console.log(t)}}))),batch.report({...t,traceId:_shared.traceId}))},_default={flushAll:t=>batch?batch.flushAll().then((()=>{const e=_shared.traceGlobals.get("phase");if((null==t?void 0:t.end)||e!==_constants.PHASE_DEVELOPMENT_SERVER)return writeStream.end()})):void 0,report:reportToLocalHost};