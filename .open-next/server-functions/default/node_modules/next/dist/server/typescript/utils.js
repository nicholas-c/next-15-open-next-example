"use strict";function _export(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}Object.defineProperty(exports,"__esModule",{value:!0}),_export(exports,{getEntryInfo:function(){return getEntryInfo},getInfo:function(){return getInfo},getSource:function(){return getSource},getTs:function(){return getTs},getTypeChecker:function(){return getTypeChecker},init:function(){return init},isAppEntryFile:function(){return isAppEntryFile},isDefaultFunctionExport:function(){return isDefaultFunctionExport},isInsideApp:function(){return isInsideApp},isPageFile:function(){return isPageFile},isPositionInsideNode:function(){return isPositionInsideNode},log:function(){return log},removeStringQuotes:function(){return removeStringQuotes}});const _path=_interop_require_default(require("path"));function _interop_require_default(e){return e&&e.__esModule?e:{default:e}}let ts,info,appDirRegExp;function log(e){info.project.projectService.logger.info(e)}function init(e){ts=e.ts,info=e.info;const t=info.project.getCurrentDirectory();appDirRegExp=new RegExp("^"+(t+"(/src)?/app").replace(/[\\/]/g,"[\\/]")),log("Starting Next.js TypeScript plugin: "+t)}function getTs(){return ts}function getInfo(){return info}function getTypeChecker(){var e;return null==(e=info.languageService.getProgram())?void 0:e.getTypeChecker()}function getSource(e){var t;return null==(t=info.languageService.getProgram())?void 0:t.getSourceFile(e)}function removeStringQuotes(e){return e.replace(/^['"`]|['"`]$/g,"")}const isPositionInsideNode=(e,t)=>{const n=t.getFullStart();return n<=e&&e<=t.getFullWidth()+n},isDefaultFunctionExport=e=>{if(ts.isFunctionDeclaration(e)){let t=!1,n=!1;if(e.modifiers)for(const r of e.modifiers)r.kind===ts.SyntaxKind.ExportKeyword?t=!0:r.kind===ts.SyntaxKind.DefaultKeyword&&(n=!0);if(t&&n)return!0}return!1},isInsideApp=e=>appDirRegExp.test(e),isAppEntryFile=e=>appDirRegExp.test(e)&&/^(page|layout)\.(mjs|js|jsx|ts|tsx)$/.test(_path.default.basename(e)),isPageFile=e=>appDirRegExp.test(e)&&/^page\.(mjs|js|jsx|ts|tsx)$/.test(_path.default.basename(e));function getEntryInfo(e,t){const n=getSource(e);if(n){let e=!0,r=!1,i=!1;return ts.forEachChild(n,(n=>{if(ts.isExpressionStatement(n)&&ts.isStringLiteral(n.expression)){if("use client"===n.expression.text){if(e)r=!0;else if(t){throw{messageText:'The `"use client"` directive must be put at the top of the file.',start:n.expression.getStart(),length:n.expression.getWidth()}}}else if("use server"===n.expression.text)if(e)i=!0;else if(t){throw{messageText:'The `"use server"` directive must be put at the top of the file.',start:n.expression.getStart(),length:n.expression.getWidth()}}if(r&&i){throw{messageText:'Cannot use both "use client" and "use server" directives in the same file.',start:n.expression.getStart(),length:n.expression.getWidth()}}}else e=!1})),{client:r,server:i}}return{client:!1,server:!1}}