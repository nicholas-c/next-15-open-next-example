"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"printDebugThrownValueForProspectiveRender",{enumerable:!0,get:function(){return printDebugThrownValueForProspectiveRender}});const _createerrorhandler=require("./create-error-handler");function printDebugThrownValueForProspectiveRender(e,r){if((0,_createerrorhandler.getDigestForWellKnownError)(e))return;let o;if("object"==typeof e&&null!==e&&"string"==typeof e.message){if(o=e.message,"string"==typeof e.stack){const n=e.stack,t=n.indexOf("\n");if(t>-1){const e=Object.defineProperty(new Error(`Route ${r} errored during the prospective render. These errors are normally ignored and may not prevent the route from prerendering but are logged here because build debugging is enabled.\n          \nOriginal Error: ${o}`),"__NEXT_ERROR_CODE",{value:"E362",enumerable:!1,configurable:!0});return e.stack="Error: "+e.message+n.slice(t),void console.error(e)}}}else"string"==typeof e&&(o=e);o?console.error(`Route ${r} errored during the prospective render. These errors are normally ignored and may not prevent the route from prerendering but are logged here because build debugging is enabled. No stack was provided.\n          \nOriginal Message: ${o}`):(console.error(`Route ${r} errored during the prospective render. These errors are normally ignored and may not prevent the route from prerendering but are logged here because build debugging is enabled. The thrown value is logged just following this message`),console.error(e))}