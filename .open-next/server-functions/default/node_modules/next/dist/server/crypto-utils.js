"use strict";function _export(e,t){for(var _ in t)Object.defineProperty(e,_,{enumerable:!0,get:t[_]})}Object.defineProperty(exports,"__esModule",{value:!0}),_export(exports,{decryptWithSecret:function(){return decryptWithSecret},encryptWithSecret:function(){return encryptWithSecret}});const _crypto=_interop_require_default(require("crypto"));function _interop_require_default(e){return e&&e.__esModule?e:{default:e}}const CIPHER_ALGORITHM="aes-256-gcm",CIPHER_KEY_LENGTH=32,CIPHER_IV_LENGTH=16,CIPHER_TAG_LENGTH=16,CIPHER_SALT_LENGTH=64,PBKDF2_ITERATIONS=1e5;function encryptWithSecret(e,t){const _=_crypto.default.randomBytes(CIPHER_IV_LENGTH),r=_crypto.default.randomBytes(CIPHER_SALT_LENGTH),E=_crypto.default.pbkdf2Sync(e,r,PBKDF2_ITERATIONS,CIPHER_KEY_LENGTH,"sha512"),c=_crypto.default.createCipheriv(CIPHER_ALGORITHM,E,_),H=Buffer.concat([c.update(t,"utf8"),c.final()]),T=c.getAuthTag();return Buffer.concat([r,_,T,H]).toString("hex")}function decryptWithSecret(e,t){const _=Buffer.from(t,"hex"),r=_.slice(0,CIPHER_SALT_LENGTH),E=_.slice(CIPHER_SALT_LENGTH,CIPHER_SALT_LENGTH+CIPHER_IV_LENGTH),c=_.slice(CIPHER_SALT_LENGTH+CIPHER_IV_LENGTH,CIPHER_SALT_LENGTH+CIPHER_IV_LENGTH+CIPHER_TAG_LENGTH),H=_.slice(CIPHER_SALT_LENGTH+CIPHER_IV_LENGTH+CIPHER_TAG_LENGTH),T=_crypto.default.pbkdf2Sync(e,r,PBKDF2_ITERATIONS,CIPHER_KEY_LENGTH,"sha512"),n=_crypto.default.createDecipheriv(CIPHER_ALGORITHM,T,E);return n.setAuthTag(c),n.update(H)+n.final("utf8")}