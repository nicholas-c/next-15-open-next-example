"use strict";async function withExecuteRevalidates(e,t){if(!e)return t();const a=cloneRevalidationState(e);try{return await t()}finally{const t=diffRevalidationState(a,cloneRevalidationState(e));await executeRevalidates(e,t)}}function cloneRevalidationState(e){return{revalidatedTags:e.revalidatedTags?[...e.revalidatedTags]:[],pendingRevalidates:{...e.pendingRevalidates},pendingRevalidateWrites:e.pendingRevalidateWrites?[...e.pendingRevalidateWrites]:[]}}function diffRevalidationState(e,t){const a=new Set(e.revalidatedTags),i=new Set(e.pendingRevalidateWrites);return{revalidatedTags:t.revalidatedTags.filter((e=>!a.has(e))),pendingRevalidates:Object.fromEntries(Object.entries(t.pendingRevalidates).filter((([t])=>!(t in e.pendingRevalidates)))),pendingRevalidateWrites:t.pendingRevalidateWrites.filter((e=>!i.has(e)))}}async function executeRevalidates(e,{revalidatedTags:t,pendingRevalidates:a,pendingRevalidateWrites:i}){var n;return Promise.all([null==(n=e.incrementalCache)?void 0:n.revalidateTag(t),...Object.values(a),...i])}Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"withExecuteRevalidates",{enumerable:!0,get:function(){return withExecuteRevalidates}});