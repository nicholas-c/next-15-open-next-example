"use strict";function _export(t,e){for(var n in e)Object.defineProperty(t,n,{enumerable:!0,get:e[n]})}Object.defineProperty(exports,"__esModule",{value:!0}),_export(exports,{BubbledError:function(){return BubbledError},SpanKind:function(){return SpanKind},SpanStatusCode:function(){return SpanStatusCode},getTracer:function(){return getTracer},isBubbledError:function(){return isBubbledError}});const _constants=require("./constants"),_isthenable=require("../../../shared/lib/is-thenable");let api;if("edge"===process.env.NEXT_RUNTIME)api=require("@opentelemetry/api");else try{api=require("@opentelemetry/api")}catch(t){api=require("next/dist/compiled/@opentelemetry/api")}const{context:context,propagation:propagation,trace:trace,SpanStatusCode:SpanStatusCode,SpanKind:SpanKind,ROOT_CONTEXT:ROOT_CONTEXT}=api;class BubbledError extends Error{constructor(t,e){super(),this.bubble=t,this.result=e}}function isBubbledError(t){return"object"==typeof t&&null!==t&&t instanceof BubbledError}const closeSpanWithError=(t,e)=>{isBubbledError(e)&&e.bubble?t.setAttribute("next.bubble",!0):(e&&t.recordException(e),t.setStatus({code:SpanStatusCode.ERROR,message:null==e?void 0:e.message})),t.end()},rootSpanAttributesStore=new Map,rootSpanIdKey=api.createContextKey("next.rootSpanId");let lastSpanId=0;const getSpanId=()=>lastSpanId++,clientTraceDataSetter={set(t,e,n){t.push({key:e,value:n})}};class NextTracerImpl{getTracerInstance(){return trace.getTracer("next.js","0.0.1")}getContext(){return context}getTracePropagationData(){const t=context.active(),e=[];return propagation.inject(t,e,clientTraceDataSetter),e}getActiveScopeSpan(){return trace.getSpan(null==context?void 0:context.active())}withPropagatedContext(t,e,n){const r=context.active();if(trace.getSpanContext(r))return e();const o=propagation.extract(r,t,n);return context.with(o,e)}trace(...t){var e;const[n,r,o]=t,{fn:a,options:s}="function"==typeof r?{fn:r,options:{}}:{fn:o,options:{...r}},c=s.spanName??n;if(!_constants.NextVanillaSpanAllowlist.includes(n)&&"1"!==process.env.NEXT_OTEL_VERBOSE||s.hideSpan)return a();let i=this.getSpanContext((null==s?void 0:s.parentSpan)??this.getActiveScopeSpan()),p=!1;i?(null==(e=trace.getSpanContext(i))?void 0:e.isRemote)&&(p=!0):(i=(null==context?void 0:context.active())??ROOT_CONTEXT,p=!0);const u=getSpanId();return s.attributes={"next.span_name":c,"next.span_type":n,...s.attributes},context.with(i.setValue(rootSpanIdKey,u),(()=>this.getTracerInstance().startActiveSpan(c,s,(t=>{const e="performance"in globalThis&&"measure"in performance?globalThis.performance.now():void 0,r=()=>{rootSpanAttributesStore.delete(u),e&&process.env.NEXT_OTEL_PERFORMANCE_PREFIX&&_constants.LogSpanAllowList.includes(n||"")&&performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(n.split(".").pop()||"").replace(/[A-Z]/g,(t=>"-"+t.toLowerCase()))}`,{start:e,end:performance.now()})};p&&rootSpanAttributesStore.set(u,new Map(Object.entries(s.attributes??{})));try{if(a.length>1)return a(t,(e=>closeSpanWithError(t,e)));const e=a(t);return(0,_isthenable.isThenable)(e)?e.then((e=>(t.end(),e))).catch((e=>{throw closeSpanWithError(t,e),e})).finally(r):(t.end(),r(),e)}catch(e){throw closeSpanWithError(t,e),r(),e}}))))}wrap(...t){const e=this,[n,r,o]=3===t.length?t:[t[0],{},t[1]];return _constants.NextVanillaSpanAllowlist.includes(n)||"1"===process.env.NEXT_OTEL_VERBOSE?function(){let t=r;"function"==typeof t&&"function"==typeof o&&(t=t.apply(this,arguments));const a=arguments.length-1,s=arguments[a];if("function"==typeof s){const r=e.getContext().bind(context.active(),s);return e.trace(n,t,((t,e)=>(arguments[a]=function(t){return null==e||e(t),r.apply(this,arguments)},o.apply(this,arguments))))}return e.trace(n,t,(()=>o.apply(this,arguments)))}:o}startSpan(...t){const[e,n]=t,r=this.getSpanContext((null==n?void 0:n.parentSpan)??this.getActiveScopeSpan());return this.getTracerInstance().startSpan(e,n,r)}getSpanContext(t){return t?trace.setSpan(context.active(),t):void 0}getRootSpanAttributes(){const t=context.active().getValue(rootSpanIdKey);return rootSpanAttributesStore.get(t)}setRootSpanAttribute(t,e){const n=context.active().getValue(rootSpanIdKey),r=rootSpanAttributesStore.get(n);r&&r.set(t,e)}}const getTracer=(()=>{const t=new NextTracerImpl;return()=>t})();