"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"BatchedFileReader",{enumerable:!0,get:function(){return BatchedFileReader}});class BatchedFileReader{constructor(e){this.reader=e}schedule(e){this.schedulePromise||(this.schedulePromise=Promise.resolve()),this.schedulePromise.then((()=>{process.nextTick(e)}))}getOrCreateBatch(){if(this.batch&&!this.batch.completed)return this.batch;const e={completed:!1,directories:[],callbacks:[]};return this.batch=e,this.schedule((async()=>{if(e.completed=!0,0===e.directories.length)return;let r;try{r=await this.load(e.directories)}catch(r){for(const{reject:t}of e.callbacks)t(r);return}for(let t=0;t<e.callbacks.length;t++){const c=r[t];c instanceof Error?e.callbacks[t].reject(c):e.callbacks[t].resolve(c)}})),e}async load(e){const r=[...new Set(e)],t=await Promise.all(r.map((async e=>{let r,t;try{r=await this.reader.read(e)}catch(e){e instanceof Error&&(t=e)}return{directory:e,files:r,error:t}})));return e.map((e=>{const r=t.find((r=>r.directory===e));return r?r.files?r.files:r.error?r.error:[]:[]}))}async read(e){const r=this.getOrCreateBatch();r.directories.push(e);return new Promise(((e,t)=>{r.callbacks.push({resolve:e,reject:t})}))}}