"use strict";function _export(e,t){for(var s in t)Object.defineProperty(e,s,{enumerable:!0,get:t[s]})}Object.defineProperty(exports,"__esModule",{value:!0}),_export(exports,{NodeNextRequest:function(){return NodeNextRequest},NodeNextResponse:function(){return NodeNextResponse}});const _apiutils=require("../api-utils"),_requestmeta=require("../request-meta"),_index=require("./index");let prop;class NodeNextRequest extends _index.BaseNextRequest{static#e=prop=_NEXT_REQUEST_META=_requestmeta.NEXT_REQUEST_META;constructor(e){var t;super(e.method.toUpperCase(),e.url,e),this._req=e,this.headers=this._req.headers,this.fetchMetrics=null==(t=this._req)?void 0:t.fetchMetrics,this[_NEXT_REQUEST_META]=this._req[_requestmeta.NEXT_REQUEST_META]||{},this.streaming=!1}get originalRequest(){return this._req[_requestmeta.NEXT_REQUEST_META]=this[_requestmeta.NEXT_REQUEST_META],this._req.url=this.url,this._req.cookies=this.cookies,this._req}set originalRequest(e){this._req=e}stream(){if(this.streaming)throw Object.defineProperty(new Error("Invariant: NodeNextRequest.stream() can only be called once"),"__NEXT_ERROR_CODE",{value:"E467",enumerable:!1,configurable:!0});return this.streaming=!0,new ReadableStream({start:e=>{this._req.on("data",(t=>{e.enqueue(new Uint8Array(t))})),this._req.on("end",(()=>{e.close()})),this._req.on("error",(t=>{e.error(t)}))}})}}class NodeNextResponse extends _index.BaseNextResponse{get originalResponse(){return _apiutils.SYMBOL_CLEARED_COOKIES in this&&(this._res[_apiutils.SYMBOL_CLEARED_COOKIES]=this[_apiutils.SYMBOL_CLEARED_COOKIES]),this._res}constructor(e){super(e),this._res=e,this.textBody=void 0}get sent(){return this._res.finished||this._res.headersSent}get statusCode(){return this._res.statusCode}set statusCode(e){this._res.statusCode=e}get statusMessage(){return this._res.statusMessage}set statusMessage(e){this._res.statusMessage=e}setHeader(e,t){return this._res.setHeader(e,t),this}removeHeader(e){return this._res.removeHeader(e),this}getHeaderValues(e){const t=this._res.getHeader(e);if(void 0!==t)return(Array.isArray(t)?t:[t]).map((e=>e.toString()))}hasHeader(e){return this._res.hasHeader(e)}getHeader(e){const t=this.getHeaderValues(e);return Array.isArray(t)?t.join(","):void 0}getHeaders(){return this._res.getHeaders()}appendHeader(e,t){const s=this.getHeaderValues(e)??[];return s.includes(t)||this._res.setHeader(e,[...s,t]),this}body(e){return this.textBody=e,this}send(){this._res.end(this.textBody)}onClose(e){this.originalResponse.on("close",e)}}var _NEXT_REQUEST_META;