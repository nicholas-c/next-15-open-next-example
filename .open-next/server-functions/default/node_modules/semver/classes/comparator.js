const ANY=Symbol("SemVer ANY");class Comparator{static get ANY(){return ANY}constructor(e,t){if(t=parseOptions(t),e instanceof Comparator){if(e.loose===!!t.loose)return e;e=e.value}e=e.trim().split(/\s+/).join(" "),debug("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===ANY?this.value="":this.value=this.operator+this.semver.version,debug("comp",this)}parse(e){const r=this.options.loose?re[t.COMPARATORLOOSE]:re[t.COMPARATOR],s=e.match(r);if(!s)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==s[1]?s[1]:"","="===this.operator&&(this.operator=""),s[2]?this.semver=new SemVer(s[2],this.options.loose):this.semver=ANY}toString(){return this.value}test(e){if(debug("Comparator.test",e,this.options.loose),this.semver===ANY||e===ANY)return!0;if("string"==typeof e)try{e=new SemVer(e,this.options)}catch(e){return!1}return cmp(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof Comparator))throw new TypeError("a Comparator is required");return""===this.operator?""===this.value||new Range(e.value,t).test(this.value):""===e.operator?""===e.value||new Range(this.value,t).test(e.semver):(!(t=parseOptions(t)).includePrerelease||"<0.0.0-0"!==this.value&&"<0.0.0-0"!==e.value)&&(!(!t.includePrerelease&&(this.value.startsWith("<0.0.0")||e.value.startsWith("<0.0.0")))&&(!(!this.operator.startsWith(">")||!e.operator.startsWith(">"))||(!(!this.operator.startsWith("<")||!e.operator.startsWith("<"))||(!(this.semver.version!==e.semver.version||!this.operator.includes("=")||!e.operator.includes("="))||(!!(cmp(this.semver,"<",e.semver,t)&&this.operator.startsWith(">")&&e.operator.startsWith("<"))||!!(cmp(this.semver,">",e.semver,t)&&this.operator.startsWith("<")&&e.operator.startsWith(">")))))))}}module.exports=Comparator;const parseOptions=require("../internal/parse-options"),{safeRe:re,t:t}=require("../internal/re"),cmp=require("../functions/cmp"),debug=require("../internal/debug"),SemVer=require("./semver"),Range=require("./range");