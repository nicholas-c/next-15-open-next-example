"use strict";function memcmp(e,o,i,t,s){for(let n=0;n<s;++n)if(e[o+n]!==i[t+n])return!1;return!0}class SBMH{constructor(e,o){if("function"!=typeof o)throw new Error("Missing match callback");if("string"==typeof e)e=Buffer.from(e);else if(!Buffer.isBuffer(e))throw new Error("Expected Buffer for needle, got "+typeof e);const i=e.length;if(this.maxMatches=1/0,this.matches=0,this._cb=o,this._lookbehindSize=0,this._needle=e,this._bufPos=0,this._lookbehind=Buffer.allocUnsafe(i),this._occ=[i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i],i>1)for(let o=0;o<i-1;++o)this._occ[e[o]]=i-1-o}reset(){this.matches=0,this._lookbehindSize=0,this._bufPos=0}push(e,o){let i;Buffer.isBuffer(e)||(e=Buffer.from(e,"latin1"));const t=e.length;for(this._bufPos=o||0;i!==t&&this.matches<this.maxMatches;)i=feed(this,e);return i}destroy(){const e=this._lookbehindSize;e&&this._cb(!1,this._lookbehind,0,e,!1),this.reset()}}function feed(e,o){const i=o.length,t=e._needle,s=t.length;let n=-e._lookbehindSize;const h=s-1,f=t[h],r=i-s,c=e._occ,_=e._lookbehind;if(n<0){for(;n<0&&n<=r;){const i=n+h,t=i<0?_[e._lookbehindSize+i]:o[i];if(t===f&&matchNeedle(e,o,n,h))return e._lookbehindSize=0,++e.matches,n>-e._lookbehindSize?e._cb(!0,_,0,e._lookbehindSize+n,!1):e._cb(!0,void 0,0,0,!0),e._bufPos=n+s;n+=c[t]}for(;n<0&&!matchNeedle(e,o,n,i-n);)++n;if(n<0){const t=e._lookbehindSize+n;return t>0&&e._cb(!1,_,0,t,!1),e._lookbehindSize-=t,_.copy(_,0,t,e._lookbehindSize),_.set(o,e._lookbehindSize),e._lookbehindSize+=i,e._bufPos=i,i}e._cb(!1,_,0,e._lookbehindSize,!1),e._lookbehindSize=0}n+=e._bufPos;const l=t[0];for(;n<=r;){const i=o[n+h];if(i===f&&o[n]===l&&memcmp(t,0,o,n,h))return++e.matches,n>0?e._cb(!0,o,e._bufPos,n,!0):e._cb(!0,void 0,0,0,!0),e._bufPos=n+s;n+=c[i]}for(;n<i;){if(o[n]===l&&memcmp(o,n,t,0,i-n)){o.copy(_,0,n,i),e._lookbehindSize=i-n;break}++n}return n>0&&e._cb(!1,o,e._bufPos,n<i?n:i,!0),e._bufPos=i,i}function matchNeedle(e,o,i,t){const s=e._lookbehind,n=e._lookbehindSize,h=e._needle;for(let e=0;e<t;++e,++i){if((i<0?s[n+i]:o[i])!==h[e])return!1}return!0}module.exports=SBMH;